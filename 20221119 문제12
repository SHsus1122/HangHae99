class Solution {
    public long solution(int price, int money, int count) {
        // 문제 
        // 새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 이 놀이기구의 원래 이용료는 price원 인데, 놀이기구를
        // N 번 째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
        // 놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 solution 함수를 완성하세요.
        // 단, 금액이 부족하지 않으면 0을 return 하세요.
        
        long[] ticket = new long[count];    // 이용횟수 만큼 담을 배열 만들기
        ticket[0] = price;                  // 뒤의 반복문을 위해 첫번째 결제금액 넣기
        long total = price;                 // 총 결제 금액을 담을 시작 금액 먼저 만들기

        for (int i = 1; i < count; i++) {
            ticket[i] = ticket[i - 1] + price;  // 두번째 결제 금액부터 넣는다. 이 때, 원래 금액에서 증가하면서 들어간다.
            total += ticket[i];             // ticekt 안의 값을 하나씩 총 결제금에 누적시켜 준다.
        }
        long answer = money - total;        // answer 에 소지금에서 총 결제금을 빼준다.
        if (answer > 0) {
            answer = 0;                     // 결과적으로 0 보다 큰 즉, 금액이 남으면 0 을 리턴
        } else if (answer < 0) {
            answer = (answer * -1);         // 0 보다 크지 않은 즉, 작으면 -1 을 곱해서 얼마가 부족한지 정확히 알려준다.
        }
        return answer;
    }
}
