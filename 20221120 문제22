class Solution {
    // 문제 22
    // 문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다.
    // 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.

    // 제한 사항
    // 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.
    // 첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.

    public String solution(String s) {
        String answer = "";     // 문자열을 넣을 빈 문자열 선언
        int cnt = 0;            // 카운트를 위한 변수 선언
        // 받아온 문자열의 길이만큼 반복한다.
        // 새로운 문자열 str 에 substring 을 이용하여 하나씩만을 찾는다.
        // 아래에서 처음은 0 번째만 찾고 다음은 1번째 이런식
        // 계속 진행하다가 빈 문자열이 나타나면 카운트를 0 으로 초기화
        // answer 문자열에 해당 문자 하나를 삽입하고 continue 를 통해
        // 반복문 시작으로 돌아가서 i 값을 증가한채로 시작한다.
        for(int i=0; i<s.length(); i++) {
            String str = s.substring(i, i+1);
            if(str.equals(" ")) {
                cnt = 0;
                answer += str;
                continue;
            }
            // 위처럼 반복하다가 카운트가 짝수면 대문자로 바꾸고 answer 에
            // 추가로 넣어준고 카운트를 증가한다.
            if(cnt%2 == 0) {
                answer += str.toUpperCase();
                cnt++;
            }
            // 이번에는 카운트가 홀수면 소문자로 바꾸고 answer 에
            // 추가로 넣어준고 카운트를 증가한다.
            else {
                answer += str.toLowerCase();
                cnt++;
            }
        }
        return answer;
    }
}
