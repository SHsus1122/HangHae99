import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

class Solution {
        // 문제 32
        // 정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아
        // 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

        // 제한사항
        // numbers의 길이는 2 이상 100 이하입니다.
        // numbers의 모든 수는 0 이상 100 이하입니다.
        
    public int[] solution(int[] numbers) {
        // 계산에 쉽게 하기 위해서 먼저 정렬을 해 준다.
        // 새로운 배열에 담기 위해서 Arraylist 선언
        Arrays.sort(numbers);
        ArrayList<Integer> nums = new ArrayList<>();

        // HashSet 의 기능으로 중복을 제거한 후에 다시 Arraylist 에 담아준다.
        HashSet<Integer> test = new HashSet<Integer>(nums);
        nums = new ArrayList<Integer>(test);

        
        // 중복 관련 제거를 위한 카운트 변수 추가
        int count = 0;
        
        // 이중 for문으로 배열의 길이만큼 돌린다.
        for (int i = 0; i < numbers.length; i++) {
            for (int j = 0; j < numbers.length - 1; j++) {
                // i 와 j 가 같으면 continue 함수를 통해 for문을 위로 올려서 다시 시작한다.
                // 이유는 배열에서 같은 인덱스에 위치한 값을 더하면 안되기 때문이다.
                if (i == j)
                    continue;
                // 이번에는 배열의 숫자가 서로 같은데 카운트가 1 이면 카운트를 0 으로 되돌리고
                // 두번째 for문을 중단하고 다시 첫번째 for문으로 돌아간다.
                if (numbers[i] == numbers[j] && count == 1) {
                    count = 0;
                    break;
                }
                // 배열의 숫자가 서로 같으면 count 를 1 증가시킨다.
                if (numbers[i] == numbers[j])
                    count++;
                // sum 에다가 위 반복문처럼 배열의 순서대로 숫자를 추가해서 넣는다.
                // 만약 nums 배열에 sum 과 동일한 값이 없으면 nums 에 추가한다.
                int sum = numbers[i] + numbers[j];
                if (!nums.contains(sum))
                    nums.add(sum);
            }
        }

        // 최종적으로 얻은 결과물을 통해 배열의 사이즈를 정해준다.
        // 최종 결과물이 Arraylist 타입이기 때문에 반복문을 통해서 배열에 넣어준다.
        // 마지막으로 Arrays.util 의 sort 기능을 이용해서 오름차순 정렬을 해준다.
        int[] answer = new int[nums.size()];
        for (int i = 0; i < nums.size(); i++) {
            answer[i] = nums.get(i);
        }
        Arrays.sort(answer);
        
        return answer;
    }
}
