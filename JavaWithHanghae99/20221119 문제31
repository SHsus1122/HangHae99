import java.util.ArrayList;
import java.util.Collections;

class Solution {
        // 문제 31 최소직사각형
        // 문제 설명
        // 명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두
        // 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다.
        // 이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.

        // 아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.
        // 명함 번호	가로 길이	세로 길이
        // 1	60	50
        // 2	30	70
        // 3	60	30
        // 4	80	40

        // 가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면
        // 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면
        // 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다.
        // 이때의 지갑 크기는 4000(=80 x 50)입니다.
        // 모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다.
        // 모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록
        // solution 함수를 완성해주세요.
        
    public int solution(int[][] sizes) {
        ArrayList<Integer>[] al = new ArrayList[sizes.length];
        ArrayList<Integer>[] tl = new ArrayList[sizes.length];
        // 동적으로 값을 넣기 위해서 ArrayList 를 빈 배열을 두개 선언
        
        // 카운트를 위한 변수 선언
        int count = 0;
        for (int i = 0; i < sizes.length; i++) {
            al[i] = new ArrayList<>();          // 각 행에 ArrayList 객체를 할당
            tl[i] = new ArrayList<>();          // 각 행에 ArrayList 객체를 할당
            al[i].add(sizes[i][count]);         // al 배열에다가 sizes 배열의 값들을 차례차례 넣는다.
            al[i].add(sizes[i][count + 1]);     // 이차원 배열이기 때문에 count 를 이용한다.
        }
        
        // 가로세로 길이중에서 긴값만을 모으거나 작은값만을 모으는 배열을 만든다.
        ArrayList<Integer> maxarr = new ArrayList<>();
        ArrayList<Integer> minarr = new ArrayList<>(); 
        
        // 예로 [0][0] [O][1] 중에서만 즉, 하나의 명함에서 큰 값만을 maxarr 에 담는다.
        // minarr 말 그대로 하나의 명함에서 작은 값만을 담는다.
        for (int i = 0; i < sizes.length; i++) {
            // numl 은 al[i] 번째 예로 [60, 50] 중에서 큰 값을 가진다.
            // num2 는 들 중에서 작은값을 가진다.
            int num1 = Collections.max(al[i]);
            int num2 = Collections.min(al[i]);
            // 이제 maxarr 에는 큰값만 들어가고 minarr 에는 작은값만 들어간다.
            maxarr.add(num1);
            minarr.add(num2);
        }
        
        // maxarr 과 minarr 에서 가장 큰 값만을 가져와서 서로를 곱한 후 반환한다.
        int maxresult = Collections.max(maxarr);
        int minresult = Collections.max(minarr);
        int answer = maxresult * minresult;
        return answer;
    }
