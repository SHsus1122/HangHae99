class Solution {
    public int[] solution(int[] arr) {
        // 정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수,
        // solution을 완성해주세요. 단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요.
        // 예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다.

        // 제한 조건
        // arr은 길이 1 이상인 배열입니다.
        //인덱스 i, j에 대해 i ≠ j이면 arr[i] ≠ arr[j] 입니다.
    
        int min = 0;        // 배열의 최솟값을 담을 변수
        int same = 0;       // 최솟값이 몇번 중복 됐는지 담을 변수
        int[] answer = {};  // 반환하기 위한 answer 빈 배열을 추가해 준다
                            // for 문은 배열의 길이가 0 이거나 하나 이면 넘어간다
        if (arr.length > 1) {
            min = arr[0];   // 시작은 우선 첫번째 변수를 최솟값에 담아준다
            // 반복문을 통해 최솟값을 구한다. 횟수는 배열의 길이보다 한번 적게 돌린다
            // 배열의 첫번째 값을 넣어주고 그 다음부터 돌려서 비교하기 때문에
            // 길이로 인한 오류발생을 없애기 위해 횟수는 한번 줄인다
            for (int i = 0; i < arr.length - 1; i++) {
                min = Math.min(min, arr[i + 1]);
            }
            // 만약 최솟값이 중복해서 나오면 따로 same 이라는 변수에 누적시켜서
            // 몇번 나오는지 카운팅 한다.
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == min) {
                    same++;
                }
            }
            // answer 배열에 순서대로 넣기 위한 카운트 변수 추가
            // 반복문은 중복을 제외한 모든 값을 넣기 위해 원래 길이에서 중복값 만큼 뺀다
            // 반복문을 통해 최솟값이 아닌 모든 값을 answer 배열에 담아준다.
            // 한번씩 담을 때 마다 카운트를 증가시켜서 정확한 위치에 담는다.
            int count = 0;
            answer = new int[arr.length - same];
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] != min) {
                    answer[count] = arr[i];
                    count++;
                }
            }
            return answer;
        } else {
            // 위의 반복문을 돌지 않았으면 -1 하나만 담긴 배열을 반환해준다.
            int[] no = {-1};
            return no;
        }
    }
}
